version: '3.8'

services:
  # RAGHeat Portfolio Agents API
  portfolio-api:
    build:
      context: ./backend/portfolio_agents
      dockerfile: Dockerfile
    container_name: ragheat-portfolio-api
    ports:
      - "8001:8000"
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-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}
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app/backend
    volumes:
      - ./backend/portfolio_agents:/app/backend/portfolio_agents
      - portfolio_logs:/app/logs
      - portfolio_data:/app/data
    depends_on:
      - neo4j
      - redis
    networks:
      - ragheat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: ragheat-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - ragheat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: ragheat-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ragheat-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Enhanced React App)
  portfolio-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ragheat-frontend
    ports:
      - "3001:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8001
      - REACT_APP_NEO4J_URL=http://localhost:7474
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    depends_on:
      - portfolio-api
    networks:
      - ragheat-network
    restart: unless-stopped

  # Original RAGHeat API (for compatibility)
  ragheat-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ragheat-original-api
    ports:
      - "8000:8000"
    environment:
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app/backend
      - ragheat_logs:/app/logs
      - ragheat_data:/app/data
    depends_on:
      - neo4j
      - redis
    networks:
      - ragheat-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ragheat-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - portfolio-api
      - portfolio-frontend
      - ragheat-api
    networks:
      - ragheat-network
    restart: unless-stopped

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ragheat-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ragheat-network
    restart: unless-stopped

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ragheat-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ragheat-network
    restart: unless-stopped

networks:
  ragheat-network:
    driver: bridge
    name: ragheat-network

volumes:
  # Portfolio Agents volumes
  portfolio_data:
    driver: local
  portfolio_logs:
    driver: local
  
  # Original RAGHeat volumes
  ragheat_data:
    driver: local
  ragheat_logs:
    driver: local
  
  # Database volumes
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # Nginx volumes
  nginx_logs:
    driver: local